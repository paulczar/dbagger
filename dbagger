#!/usr/bin/env ruby

require 'net/https'
require 'uri'
require 'json'
require 'optparse'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: dbagger -u <username> -g <group1,group2>"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-u","--username USERNAME","Username you want to create") do |username|
    options[:username] = username
  end

  opt.on("-i","--gh-login USERNAME","Github username if different to --username") do |gh_username|
    options[:gh_username] = gh_username
  end

  opt.on("-g","--groups GROUP1,GROUP2","Comma seperated list of groups to add user to") do |groups|
    options[:groups] = groups
  end

  opt.on("-a","--api 'https://api.github.com'","defaults to 'https://api.github.com' if not set") do |github_api|
    options[:github_api] = github_api.sub(/\/+$/,'')
  end

  opt.on("-s","--shell '/bin/bash'","defaults to '/bin/bash' if not set") do |shell|
    options[:shell] = shell
  end

  opt.on("-a","--api github_API_URI","defaults to 'https://api.github.com' if not set") do |github_api|
    options[:github_api] = github_api.sub(/\/+$/,'')
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end
end

opt_parser.parse!

options[:github_api] ||= ENV['github_api'] ||= 'https://api.github.com'
options[:shell] ||= '/bin/bash'
options[:gh_username] ||= options[:username]

def collect_data(options)
  uri = URI.parse("#{options[:github_api]}/users/#{options[:gh_username]}")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  response = http.request(Net::HTTP::Get.new(uri.request_uri))

  gituser = JSON.parse(response.body)

  return false if gituser['message'] == 'Not Found'

  uri = URI.parse("#{options[:github_api]}/users/#{options[:gh_username]}/keys")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  response = http.request(Net::HTTP::Get.new(uri.request_uri))

  keys = []

  return false if response.body == 'Not Found'

  JSON.parse(response.body).each do |key|
    keys.push(key['key'])
  end

  return false if keys.empty?

  return {
    id: options[:username],
    ssh_keys: keys,
    groups: options[:groups].split(','),
    shell: options[:shell],
    comment: gituser['name']
  }

end

if options[:username] && options[:groups]
  if databag = collect_data(options)
    puts databag.to_json
  else
    puts 'something went wrong.  check username is valid and has keys.'
    puts options
  end
else
  puts opt_parser
end